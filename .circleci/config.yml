version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn verify

      - run:
          name: Package APP
          command: mvn package -DskipTests=true

      - persist_to_workspace:
          root: .
          paths:
            - service1
            - k8s.yml

  deploy:
    docker:
      - image: circleci/openjdk:8-jdk

    environment:
      - PROJECT_NAME: "demo-microservices-training"
      - GOOGLE_PROJECT_ID: "probable-force-241609"
      - GOOGLE_COMPUTE_ZONE: "europe-west3-a"
      - GOOGLE_CLUSTER_NAME: "standard-cluster-1"
      - GOOGLE_REGISTRY_URL: "eu.gcr.io/${GOOGLE_PROJECT_ID}"



    working_directory: ~/repo
    steps:
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
        name: Dockerize image
        command: |
        docker build -t ${GOOGLE_REGISTRY_URL}/service1:${CIRCLE_WORKFLOW_ID} service1/

        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
        docker push ${GOOGLE_REGISTRY_URL}/service1:${CIRCLE_WORKFLOW_ID}

      - run:
          name: Deploy to Kubernetes
          command: |
            envsubst < k8s.yml > patched_k8s.yml
            kubectl apply -f patched_k8s.yml
            kubectl rollout status deployment/service1

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build